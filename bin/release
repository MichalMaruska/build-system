#! /bin/zsh -euf

source /usr/share/build-system/functions.sh
# set -x cannot be done in a functions?
eval $(possibly_trace)
check_getopt

check_start_gnupg

function usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [options]

At the end
git tag ... "distro/version"
dput-target ... taken from MBS_TARGETS env variable
possibly install on HOST

options:
[+-a arch] [-m] [-p dput-target]* [-v version ] [-s] [-o]
-r, --distro [distro]		package for that distribution (default host one), ignore debian/changelog?
-a, --arch   architecture       default Host.

-b --ignore  ... ignore Git branch
-f --force ... regenerate & commit even if apparently debian/changelog ...
-m --minor  ... increase the version only by minor step. Hint: semantics/changelog

-s --source  ... build the tarball/source package too.
-u         don't sign

-p, --dput  [target] ... add named tput target.
--tag  [name]  default  {distro}/

-i --install ...
-o --auto  ... don't open the Editor -- Changelog is unverified.    DANGEROUS?

-h --help
EOF
    unsetopt POSIX_ARGZERO
}

#### Setup defaults & initial state:

# We need to invoke dch, and then somehow debuild.
# So start collecting options for those:
typeset -a DEBUILD_OPTIONS
typeset -a DCH_OPTIONS
DEBUILD_OPTIONS=()
DCH_OPTIONS=()


GITSHA=$(git rev-list --max-count=1 HEAD)
# I have special make
DEBUILD_OPTIONS+=(-eMAKEFLAGS -eGITSHA)

DEBUG=y

# where does it come from? $DEB_BUILD_ARCH
ARCH=""
# Defaults for options:
USER_DISTRIBUTION=""
DISTRIBUTION=""

step=minor
build_source=no
FORCE=n

# this is for the (pre/post) hooks .. for `dput-install'
POSTBUILD_INSTALL_OPTIONS="-I"

## Dput
# same what I use in zlogin for MBS_TARGETS!
typeset -T DPUT_TARGETS dput_targets :
dput_targets=()

typeset -a GBP_OPTIONS
GBP_OPTIONS=()

pre_build_hook=(pre-build-hook)

if ! my_own_project # This scans the control/control:
then
    DCH_OPTIONS+=("--ignore-branch")
    GBP_OPTIONS+=("--git-ignore-branch")
fi


### process command line:

cmd_options=$(getopt --name $0 --shell bash \
    --longoptions help,arch,dput,ignore,install,noinstall,tag,version:,nocheck \
    --longoptions force,source,distro:minor,major \
    --options ha:bfr:T:p:iIv:ousmM \
    -- "$@" ) || { usage && exit 1 }
eval set -- "$cmd_options"

while (( $# > 0 )) do
      case $1 in
          --help | -h)
              usage
              exit 0
              ;;
          --arch | -a)
              shift
              ARCH="$1"
              ;;
          --ignore | -b)
              DCH_OPTIONS+=("--ignore-branch")
              GBP_OPTIONS+=("--git-ignore-branch")
              ;;
          --force | -f)
              FORCE=y
              ;;
          --dput | -p)
              shift
              dput_targets+=($1)
              ;;

          --distro | -r)
              shift
              USER_DISTRIBUTION="$1"
              ;;
          --tag | -T )
              shift
              git_tag=$1
              ;;
          --source | -s)
              # still  dpkg-buildpackage will call dpkg-source --before-build
              # which does not do harm, though.
              build_source=yes
              ;;
          ##  which is?  install the package?
          --install | -i)
              # fixme:
              GBP_OPTIONS+=("-i")
              ;;
          --install | -i)
              POSTBUILD_INSTALL_OPTIONS="-i"
              ;;
          --upgrade | -I)
              POSTBUILD_INSTALL_OPTIONS="-I"
              ;;
          --noinstall | +n)
              POSTBUILD_INSTALL_OPTIONS="-n"
              ;;

          --auto | -o)
              # non-interactive/offline
              DCH_OPTIONS+=("--spawn-editor=snapshot")
              ;;
          --minor | -m)
              step=minor
              ;;
          --major | -M)
              step=major
              ;;
          --version | -v)
              shift
              USER_VERSION=$1
              ;;
          -u)
              # don't sign??
              GBP_OPTIONS+=("-us"  "-uc")
              ;;
          --nocheck )
              DEB_BUILD_OPTIONS+=nocheck
              export DEB_BUILD_OPTIONS
              ;;
      esac
      shift
done

# No source package -> optimize
if [ $build_source != yes ]; then
    if [ $DEBUG = y ]; then info "not building source package";fi
    GBP_OPTIONS+=(--git-no-create-orig)
fi

#todo: I could build arch-dependent & independent separately.
# -A build.
# for more architectures: -B builds.



## Check all data is ready/consistent. (Before invoking manual interaction).
# fallback on env-var value:
if [ "$dput_targets" = "" ]; then
    if [ $DEBUG = y ]; then info "checking dput targets";fi
    if [ -z "${MBS_TARGETS-}" ];
    then
        cecho red "No targets, only local then"
        exit 1
    else
        # fixme: since it comes from a generic shell, divide it as such:
        #dput_targets=${=MBS_TARGETS}
        DPUT_TARGETS=${MBS_TARGETS}
    fi
fi




## Prepare for the debian/changelog entry:
if [ "$DISTRIBUTION" = "" ]; then
    if [ $DEBUG = y ]; then info "guessing distribution";fi
    # todo:
    # when archi  ALL -> release
    # otherwise   lsb_release --short --codename
    DISTRIBUTION=${MBS_DISTRO:-release}
fi

artifacts_dir=/gbp
if [[ -n "$USER_DISTRIBUTION" ]]; then
    # DCH_OPTIONS+=("--git-dist=$USER_DISTRIBUTION")
    GBP_OPTIONS+=("--git-dist=$USER_DISTRIBUTION")

    # Skip installing build-dep by gbp:
    pre_build_hook+=(-s)
    # all this is ONE argument?
    GBP_OPTIONS+=("--git-builder=debspawn --config ~/debspawn.toml build --only binary --buildflags=-b $USER_DISTRIBUTION")

    artifacts_dir=/gbp/$USER_DISTRIBUTION
fi

# I want to be able to repeat the run.
# So, update the changelog and git tag only if needed.

## get the current version string.
if [ $DEBUG = y ]; then info "seeing if new changelog needs to be done";fi

# todo:
# if no debian/changelog or not in Git ->
#  --create

# if status OR not updated!
if changelog_needs_new_section "release"
then
    cecho red "Taking hint on VERSION from the debian/changelog"
    load_distr_version_from_changelog
    # drop_verbal_suffix

    # invokes: gbp dch
    generate_commit_changelog $step
fi

# input: $found_any_tag, GIT_OFFSET (from git-describe(1) )
# side-effects:
#   sets TAGOPTIONS
#   adds to GBP_OPTIONS
function decide_git_tag()
{
    # Design considerations:

    # At this point I have the definitive release commit, but maybe not a tag.
    # The commit contains the generated changelog! so after`generate_commit_changelog'.

    # If I stop here, and rerun, I would like to resume.

    # fixme: But maybe the tag is there already?
    # if NO tag at all:
    # fatal: No names found, cannot describe anything.

    # global TAGOPTIONS
    # don't use the version!
    TAGOPTIONS=(--git-posttag=post-tag-hook)

    # *now* the default value:
    # : ${GIT_TAG:=$DISTRIBUTION/$VERSION}

    # DISTRIBUTION, VERSION
    # note: without     drop_verbal_suffix

    # mmc: fixme! does this parse a different, updated changelog?
    load_distr_version_from_changelog

    # if different &
    local NEWGIT_TAG
    NEWGIT_TAG=$DISTRIBUTION/$VERSION
    NEWGIT_TAG=${NEWGIT_TAG/:/%}

    ## fixme: 1/ grep  2/ the tag might have ":" converted to %.
    if git tag -l "$NEWGIT_TAG"|grep "." > /dev/null
    then
        cecho red "the tag $NEWGIT_TAG already exists! not re-creating it now"
    else
        cecho green "Will git tag after successful build: $NEWGIT_TAG"
        GBP_OPTIONS+=(
            --git-tag "--git-debian-tag=$DISTRIBUTION/%(version)s"
        )
    fi
}

if [ $DEBUG = y ]; then info "Deciding for the Git tag";fi

if [[ -z "$ARCH" ]]; then
    decide_git_tag
else
    TAGOPTIONS=()
fi


echo exporting DPUT_TARGETS $DPUT_TARGETS
export DPUT_TARGETS

export GITSHA


dpkg_buildpackage_flags=(-nc)

name=$(deb-pkg-name debian/control)
version=$(deb-pkg-version debian/changelog)
host_architecture=$(dpkg-architecture -q DEB_HOST_ARCH)

# fixme:
version=${version#*:}
changesfile="$artifacts_dir/${name}_${version}_${host_architecture}.changes"
# fixme: this ignore USER_DISTRIBUTION
if [ "$ARCH" != "" ]; then
    dpkg_buildpackage_flags+=(-B)
    # this receives all args from gbp buildpackage  unless --git- prefix.
    changesfile="$artifacts_dir/${name+$name-}$ARCH.changes"
    BUILDER="nspawn-debuild -a $ARCH -n $changesfile -- $DEBUILD_OPTIONS $dpkg_buildpackage_flags"
    export DEB_HOST_ARCH=$ARCH
    pre_build_hook+=( -a $ARCH)
else
    dpkg_buildpackage_flags+=(-b)
    BUILDER="debuild $DEBUILD_OPTIONS $dpkg_buildpackage_flags"
fi

# fixme: this install should be done as part of the builder.
if [ "$ARCH" != "" ]; then
    POSTBUILD="dput-install -r -n $changesfile"
else
    POSTBUILD="dput-install -r -n $changesfile $POSTBUILD_INSTALL_OPTIONS"
fi

# -sa dpkg-genchanges: force inclusion of original sources (in the changes file)

# set PREVERSION_HOOK_NAME
prepare_hook_name

args=(
    --git-ignore-new
    --git-cleaner=/bin/true
    # this could be inside the container, partly
    $PREVERSION_HOOK_NAME="$pre_build_hook"
    # this inside the container:
    --git-postbuild="$POSTBUILD"
    $TAGOPTIONS
    $GBP_OPTIONS
    # repeated!
    # -b
)

set -x
# note: additional options come from ~/.gbp.conf
gbp buildpackage $args
